name: Production-Branch-CI-CD
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  push:
    branches:
      - 'master'
      - 'release/*'

jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: wagoid/commitlint-github-action@v5
      # - uses: gitleaks/gitleaks-action@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-security:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...

  deps-security:
    needs: pre-build
    runs-on: ubuntu-latest
    name: Run govulncheck
    steps:
      - id: govulncheck
        uses: golang/govulncheck-action@v1
        with:
            go-version-input: 1.21
            go-package: ./...
  lint:
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.54

  test-build:
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false

      - name: Run tests
        run: go test ./... -v -count 1 -timeout 5m

      - name: Check editorconfig compliance
        uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  deploy:
    needs: [pre-build, test-build, lint, deps-security, code-security]
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: stroming/final-project-telerik
          tags: |
            type=sha,format=short,prefix=

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: stroming/final-project-telerik:master-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy vulnerability scanner
        if: ${{ !contains(github.event.commits[0].message, '[trivy-skip]') }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/stroming/final-project-telerik:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
